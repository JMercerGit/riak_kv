%%% This part file is incorporated into the riak_kv_ddl_helper function
%%% generated by riak_kv_ddl_compiler.erl
%%%
%%% It should contain functions only
%%%
-include_lib("riak_kv/include/riak_kv_index.hrl").
-include("riak_kv_ddl.hrl").

get_partition_key(#ddl{bucket = _B, fields = _F, partition_key = PK}, Obj)
  when is_tuple(Obj) ->
    #partition_key{ast = Params} = PK,
    _Key = build(Params, Obj, []).

build([], _Obj, A)                         -> list_to_tuple(lists:reverse(A));
build([#param{name = Nm} | T], Obj, A)     -> Val = extract(Obj, Nm),
					      build(T, Obj, [Val | A]);
build([#hash_fn{mod  = Mod,
		fn   = Fn,
		args = Args} | T], Obj, A) -> A2 = convert(Args, Obj, []),
					      Res = erlang:apply(Mod, Fn, A2),
					      build(T, Obj, [Res | A]).

convert([], _Obj, Acc)                     -> lists:reverse(Acc);
convert([#param{name = Nm} | T], Obj, Acc) -> Val = extract(Obj, Nm),
					      convert(T, Obj, [Val | Acc]);
convert([Atom | T], Obj, Acc)              -> convert(T, Obj, [Atom | Acc]).
